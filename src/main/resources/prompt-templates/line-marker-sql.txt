# Generate DuckDB SQL for Line Marker

**Task:**
Generate a DuckDB SQL query suitable for a line marker.
The query must:

1. Return a **single numerical value**.
2. Use the following placeholders as needed:
   - `#method_fqn#`: Fully qualified name of the method at the marker.
   - `#feature_name#`: Feature flag key near the marker.
   - `#method_fqns_in_file#`: CSV of all method FQNs in the current file (e.g., `'com.example.A.method1', 'com.example.A.method2'`).
   - `#feature_names_in_file#`: CSV of all feature names in the current file (e.g., `'feat_a', 'feat_b'`).
   - `#mapping_path#`: HTTP mapping path regex (e.g., `/users/[^/]+`).
   - `#mapping_method#`: HTTP method string (e.g., `'GET'`).
   - `#mapping_paths_in_file#`: CSV of all mapping paths in the current file.
   - `#mapping_methods_in_file#`: CSV of all mapping methods in the current file.

**Examples:**
```sql
SELECT COUNT(*) FROM my_logs WHERE method_fqn = '#method_fqn#' AND event = 'ERROR';

SELECT AVG(latency_ms)
FROM performance_metrics
WHERE method_fqn = '#method_fqn#' AND feature_flag = '#feature_name#';

SELECT
  COUNT(*) FILTER (WHERE method_name = '#method_fqn#') * 1.0 /
  NULLIF(COUNT(*), 1)
FROM log_entries_100
WHERE method_name IN (#method_fqns_in_file#);

SELECT COUNT(*)
FROM apache_log
WHERE method = '#mapping_method#'
  AND REGEXP_MATCHES(path, '^#mapping_path#/?(\?.*)?$');
```

3. Refer to the table samples below for available columns and structure.

**Description from User:**
{{llmDescription}}

**Available Table Samples (Top 10 rows using `USING SAMPLE 10 ROWS`):**
{{tableSamples}}
